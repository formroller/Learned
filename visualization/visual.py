# -*- coding: utf-8 -*-
"""진료내역_re(v5).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHI9iVMYS7HGKjmqqQjovol58B_Amg9O
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from datetime import datetime
from dateutil.parser import parse
import time
import calendar
import scipy

import pandas_profiling

import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# 한글 폰트
!apt -qq -y install fonts-nanum > /dev/null
 
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
 
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=10)
fm._rebuild()
 
# 그래프에 retina display 적용
# %config InlineBackend.figure_format = 'retina'
 
# Colab 의 한글 폰트 설정
plt.rc('font', family='NanumBarunGothic')

"""# 1. 데이터  불러오기"""

chart1=pd.read_csv('/content/drive/MyDrive/헤이드/지역별/진료내역1.csv', encoding = 'cp949')

"""## 1. 데이터 타입 변경

## 변수 설명
 - 0   기준년도        int64
  * 해당 정보의 기준 년도를 제공
 - 1   가입자 일련번호    int64  -> category
  * 가입자에 부여한 일련번호
 - 2   진료내역일련번호    int64 
  * 진료내역에 대한 일련번호
 - 3   성별코드        int64 
  * 1-남자, 2-여자
 - 4   연령대코드       int64 
  * 1~18
  * 0~84세까지 5세 단위 그룹화, 85세 이상은 85+ 
 - 5   시도코드        int64 
  * 해당 수진자 거주지의 시도코드
 - 6   요양개시일자      int64  -> date
  * (외래) 요양기관에 내원한 연,월,일
  * (입원) 진료를 위해 최초 입원한 연,월,일
 - 7   서식코드        int64 
  * 환자의 진료 형태를 구분
 - 8   진료과목코드      int64 
  * 병원급일 경우 실제진료 받은 진료과목
  * 의원급일 경우 상병명에 해당하는 진료과목
 - 9   주상병코드       object
  * 주상병 분류기호
 - 10  부상병코드       object
  * 추가상병 분류기호
 - 11  요양일수        int64   -> date(day)
  * 수진자가 요양급여 받은 실 일수
 - 12  입내원일수       int64   -> date(day)
  * (입원진료) 진료받기 위해 입원한 날부터 퇴원 일까지의 실 일수
  * (외래진료) 내원해 진료를 받은 실 일수
 - 13  심결가산율       float64 
  * 요양기관 종별에 따라 가산 적용되는 진료비의 가산율(%)
 - 14  심결요양급여비용총액  int64   
  * 수진자 본인이 부담해야 될 금액인「심결본인부담금」과 보험자가 부담해야 할 심결 보험자부담금」합친 금액
  * 삭감사유(주상병 누락, 착오 청구 등) 발생으로 심결요양급여비용총액이 심결본인부담금 및 심결보험자부담금의 합과 다르거나 “0”일 수 있음
 - 15  심결본인부담금     int64   
  * 수진자 본인이 부담해야할 부담금
 - 16  심결보험자부담금    int64   
  * 보험자가 부담할 금액
 - 17  총처방일수       int64   -> date(day)
  * 조제 투약하도록 처방한 일수의 합
 - 18  데이터 기준일자    int64  -> date('%Y%m%d)
  * 데이터 작성 기준일자
"""

chart1.info()

"""### 1)날짜 변수 변환"""

# datetime으로 변환하기 위해 'str' 형변환

chart1['요양개시일자'] = chart1['요양개시일자'].astype('str')
chart1['데이터 기준일자'] = chart1['데이터 기준일자'].astype('str')

# 데이터 타입 변경 datetime
chart1['데이터 기준일자'] = pd.to_datetime(chart1['데이터 기준일자'])
chart1['요양개시일자'] = pd.to_datetime(chart1['요양개시일자'])
chart1['기준년도'] = pd.to_datetime(chart1['기준년도'], format='%Y').dt.year

# chart1['요양개시일자']=chart1['요양개시일자'].apply(parse) // parse, 처리속도 느림

# chart1['요양개시일자 변수 변경'] -> 월,요일,일
chart1['요양개시_월']=chart1.요양개시일자.apply(lambda x : x.month)
chart1['요양개시_요일']= chart1.요양개시일자.apply(lambda x : x.weekday())
chart1['요양개시_일']=chart1.요양개시일자.apply(lambda x : x.day)

# cahrt1['요양개시일자] 계절별 변환
season=[]
for i in chart1['요양개시_월']:
    if i == 12 or i==1 or i==2:
        season.append('겨울')
    elif i == 3 or i==4 or i==5:
        season.append('봄')
    elif i == 6 or i==7 or i==8:
        season.append('여름')
    else:
        season.append('가을')

chart1['요양개시_계절'] = season

# 불필요한 컬럼 제거('요양개시일자)
chart1.drop(['요양개시일자'], axis=1, inplace=True)

"""### 2) 범주형 변수 변환"""

categoryValue = ['가입자 일련번호','진료내역일련번호','성별코드','연령대코드','진료과목코드','주상병코드','부상병코드','서식코드','심결가산율','시도코드']

# 범주형 변수 변환
for var in categoryValue:
    chart1[var] = chart1[var].astype('category')

# # '성별코드' 변경
# def gender():
#     global chart1
#     gender=pd.get_dummies(chart1['성별코드'], prefix='성별')
#     chart1 = pd.concat([chart1,gender], axis=1)
#     chart1.drop('성별코드', axis=1, inplace=True)
#     return chart1

# chart1 = gender()
# chart1.head()

"""### 3) 시도명 부여"""

# 시도명 부여('사용자 매뉴얼 기준으로 변경)
loc = {'전국': 00,'서울특별시':11,'부산광역시':26,'대구광역시':27,'인천광역시':28,'광주광역시':29,'대전광역시':30,'울산광역시':31,
       '세종특별자치시':36,'경기도':41,'강원도':42,'충청북도':43,'충청남도':44,'전라북도':45,'전라남도':46,'경상북도':47,'경상남도':48,'제주도':49}
locName = {v:k for k,v in loc.items()}

# s_df1[시도코드]기준 loc[시도 지역코드] 지역명 입력
sido_name = [locName[i] for i in chart1['시도코드']]
locname = pd.Series((i[:] for i in sido_name))
chart1['시도명'] = locname

chart1['시도명'] = chart1['시도명'].str.replace('제주도','제주특별자치도')

"""### 4) 상병코드명 부여"""

# 상병 한글명 부여
refer = pd.read_csv('/content/drive/MyDrive/헤이드/지역별/건강보험심사평가원_상병마스터_20200701.csv', encoding = 'cp949')
refer.drop(refer.columns[2:], axis=1, inplace=True)

c1 = refer[refer.columns[:2]].dropna()  # '상병기호' 중복 제거
d1 = c1.set_index('상병기호').T.to_dict('list') # '상병기호' key로, 한글명을 value로 // 필요한 열을 DF의 인덱스로 만들고 .T()함수 사용해 전치

mains =[d1[i] if i in d1 else ['미지정'] for i in chart1['주상병코드']]
sub =[d1[i] if i in d1 else ['미지정'] for i in chart1['부상병코드']]
주상병_한글명= pd.Series((i[0] for i in mains))
부상병_한글명= pd.Series((i[0] for i in sub))
chart1['주상병한글명'] = 주상병_한글명
chart1['부상병한글명'] = 부상병_한글명

"""# 중간정리
 1. 총데이터와 (약 450만건) 가입자 일련번호(35만건) 갯수 상이.
 2. 가입자 중 여러 번 진료 받은 기록이 섞여있다.
 3. '진료내역'의 주상병코드와 '상병마스터'의 상병기호중 일치하지 않는 코드는 '미분류' 표기
  > 'F_', 'B_'.. 등
 
 ### 과제(시각화)
    1. 지역별 가입자(35만명) 진료 합계 도출
    2. 가장 많이 발생하는 주상병 도출
    3. 지역별 많이 발생하는 주상병 도출(3위)
    4. 지역별 많이 발생하는 주상병 도출
    5. 월별 진료자수 도출
    6. 계절별 주상병 총 합계
    7. 성별 진료과목 합계
"""

import folium
from folium import plugins

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import json

# geojson load
state = '/content/drive/MyDrive/헤이드/지역별/map.geojson'
state2 = json.load(open(state))

m = folium.Map(location=[35.8, 127.6], tiles='OpenStreetMap', zoom_start=8)
print(m)

"""### 1) 지역별 진료합계 도출"""

## 지역 진료자수
chart35 = chart1.drop_duplicates(['가입자 일련번호']).copy()
population=chart35.groupby('시도명')[['가입자 일련번호']].count()
population.rename(columns = {'가입자 일련번호':'합계'},inplace = True)
populations = population.reset_index(level=['시도명'])
top_populations=populations.sort_values(ascending=False, by='합계') ## 지역별 진료자 내림차순
top_populations

plt.rcParams["figure.figsize"] = (20,15)
sns.barplot(data=top_populations, x='시도명',y='합계')
plt.title('지역별 진료자 수', fontsize=20)
plt.xticks(rotation=45)
plt.xlabel('시도명', fontsize=15)
plt.ylabel('진료자 합계', fontsize=15)

# 지도 불러오기(중심 좌표 : 서울)
m = folium.Map(location=[35.8, 127.6], tiles='OpenStreetMap', zoom_start=8)
m.choropleth(
    geo_data=state2,
    data = populations,
    columns = ('시도명','합계'),
    key_on='feature.properties.CTP_KOR_NM',
    fill_color = 'GnBu',
    legend_name='지역별 진료자 수(35만명 기준)'
    )
print(m)
# m.to_png('population_geo.html')
# m

"""#### 1-2) 월별 진료자 합계"""

## 월별 진료자 합(전체 진료 건 수)
mon_pops1=chart1.groupby('요양개시_월')[['가입자 일련번호']].count()
mon_pops1.rename(columns = {'가입자 일련번호':'합계'},inplace = True)
month_pops2 = mon_pops1.reset_index(level=['요양개시_월'])
month_pops2.to_csv('months.csv', encoding='cp949')

plt.rcParams["figure.figsize"] = (20,15)
plt.plot(month_pops2['합계'])
plt.xticks(month_pops2['요양개시_월'])
plt.title('월별 진료 인구 합(2019년)', fontsize = 20)
plt.xlabel('월', fontsize=15)
plt.ylabel('진료수 합', fontsize=15)
plt.show()

## 월별 진료자 합(35만명)
chart35 = chart1.drop_duplicates(['가입자 일련번호']).copy()
mon_pops=chart35.groupby('요양개시_월')[['가입자 일련번호']].count()
mon_pops.rename(columns = {'가입자 일련번호':'합계'},inplace = True)
month_pops = mon_pops.reset_index(level=['요양개시_월'])
month_pops

plt.rcParams["figure.figsize"] = (20,15)
plt.plot(month_pops['합계'])
plt.xticks(month_pops['요양개시_월'])
plt.title('월별 진료 인구 합(2019년)', fontsize = 20)
plt.xlabel('월')
plt.ylabel('진료수 합계')
plt.show()

"""### 2) 진료자 많이 발생하는 주상병
 > 상세불명의 급성 기관지염 (전체 데이터 기준)
"""

def top(data, n=3):
    return data.sort_values(ascending=False)[:n]

# 주상병 빈도 순위
usually=pd.DataFrame(chart1.groupby(['주상병한글명'])[['가입자 일련번호']].count())
usually.rename(columns = {'가입자 일련번호':'합계'}, inplace = True)
usually=usually.reset_index(level = ['주상병한글명'])
usually.sort_values(ascending=False, by='합계') 
usually2=usually.sort_values(ascending=False, by='합계')

# top10
plt.rcParams["figure.figsize"] = (20,15)
top10_usually = usually2[:10]
top10_usually['비율'] = top10_usually['합계'] / len(chart1) * 100
plt.pie(top10_usually['합계'], labels = top10_usually['주상병한글명'], startangle=90, autopct='%0.2f%%')
plt.legend(top10_usually['주상병한글명'])
plt.xlabel('[주상병 상위 10개 빈도]', fontsize=16)

"""### 3) 지역별 많이 발생하는 주상병 TOP3"""

often_3 = chart1.groupby(['시도코드','시도명','주상병한글명'])['주상병코드'].count()
loc_des = pd.DataFrame(often_3.groupby(level=0, group_keys=False).apply(top))
loc_des.rename(columns = {'주상병코드' : '합계'}, inplace = True)
loc_des2 = loc_des.reset_index(level=['시도코드','시도명','주상병한글명'])
loc_des2

plt.rcParams['figure.figsize'] = [20,15]
max_val = np.ceil(max(loc_des2['합계']))

plt.rcParams["figure.figsize"] = (20,15)
for i,loc in enumerate(loc_des2['시도코드'].unique()):
    df_i = loc_des2[loc_des2['시도코드']==loc]
    plt.subplot(3,6,i+1)
    plt.bar(df_i['주상병한글명'], df_i['합계'], alpha = 0.5, color='Blue')
    plt.title((df_i['시도명']).unique() , fontsize=18)
    if i == 1:
        plt.xlabel('주상병명', fontsize=14)
    if i == 0:
        plt.ylabel('합계', fontsize=14)
    if i != 0:
        plt.yticks([])

    plt.xlabel('주상병명', fontsize=12)
    plt.ylabel('합계', fontsize=12)
    plt.xticks(fontsize=12, rotation=45)
    plt.yticks(fontsize=15)
    plt.ylim(0, max_val)
    plt.tight_layout()

"""### 4) 지역별 가장 많이 발생하는 주상병"""

first_loc = pd.DataFrame(often_3.groupby(level=0, group_keys=False).apply(top,1))
first_loc.rename(columns = {'주상병코드' : '합계'}, inplace = True)
max_loc = first_loc.reset_index(level=['시도코드','시도명','주상병한글명'])
max_loc.to_csv('max.csv', encoding='cp949')

"""#### 4-1. '상세불명의 급성 기관지염' 진료자 수"""

# 상세불명의 급성 기관지염의 빈도수 가장 높다.
J209 = chart1[chart1['주상병한글명']=='상세불명의 급성 기관지염']
loc_209 = J209.groupby(['시도명','주상병한글명'])[['주상병코드']].count()
loc_209.rename(columns={'주상병코드':'합계'}, inplace = True)
loc209 = loc_209.reset_index(level=['시도명','주상병한글명'])
sort_loc209 = loc209.sort_values(ascending=False,by='합계')

plt.rcParams["figure.figsize"] = (20,15)
sns.barplot(x='시도명',y='합계', data = sort_loc209)
plt.title('상세불명의 급성 기관지염 합계')
plt.xlabel('시도명', fontsize=15)
plt.ylabel('기관지염 합계', fontsize=15)

# 지도 불러오기(중심 좌표 : 서울)
m2 = folium.Map(location=[35.8, 127.6], tiles='OpenStreetMap', zoom_start=8)
m2.choropleth(
    geo_data=state2,
    data = loc209,
    columns = ('시도명','합계'),
    key_on='feature.properties.CTP_KOR_NM',
    fill_color = 'GnBu',
    legend_name='상세불명의 급성 기관지염 수'
    )
print(m2)
m2

## test 계절과 상관
# 상세불명의 급성 기관지염의 빈도수 가장 높다.
weathers = chart1[chart1['주상병한글명']=='상세불명의 급성 기관지염']
weather=weathers.groupby(['요양개시_계절'])[['주상병코드']].agg('count')
weather.rename(columns = {'주상병코드':'합계'}, inplace = True)
weather=weather.reset_index(level=['요양개시_계절'])

plt.rcParams["figure.figsize"] = (20,15)
sns.barplot(data = weather, x='요양개시_계절', y='합계')
plt.title('계절별 기관지염 합', fontsize=16)
plt.legend(weather['요양개시_계절'], fontsize=10)

"""#### 4-2. 미지정 진료자 수"""

# 미지정
undefined = chart1[chart1['주상병한글명']=='미지정']
undefined2 = undefined.groupby(['시도명','주상병한글명'])[['주상병코드']].count()
undefined2.rename(columns={'주상병코드':'합계'}, inplace = True)
undefined3 = undefined2.reset_index(level=['시도명','주상병한글명'])
sort_un=undefined3.sort_values(ascending=False, by='합계')

plt.rcParams["figure.figsize"] = (20,15)
sns.barplot(data = sort_un, x = '시도명', y = '합계')

# 지도 불러오기(중심 좌표 : 서울)
m2 = folium.Map(location=[35.8, 127.6], tiles='OpenStreetMap', zoom_start=8)
m2.choropleth(
    geo_data=state2,
    data = undefined3,
    columns = ('시도명','합계'),
    key_on='feature.properties.CTP_KOR_NM',
    fill_color = 'GnBu',
    legend_name='미지정'
    )
print(m2)
m2

"""#### 4-3. 고혈압(동맥성)(본태성)(월발성)(전신) 진료자 수"""

# 고혈압(동맥성)(본태성)(월발성)(전신)
blood_p = chart1[chart1['주상병한글명']=='고혈압(동맥성)(본태성)(원발성)(전신)']
blood_p2 = blood_p.groupby(['시도명','주상병한글명'])[['주상병코드']].count()
blood_p2.rename(columns={'주상병코드':'합계'}, inplace = True)
blood = blood_p2.reset_index(level=['시도명','주상병한글명'])
blood

top3 =blood.merge(undefined3,how = 'left',on = '시도명').merge(loc209, how = 'left')
# top3.rename(columns={'주상병한글명_x':'고혈압','합계_x':'고혈압_합계', '주상병한글명_y':'미지정'})
top = pd.concat([blood, undefined3, loc209])
top

"""### 5) 월별 진료자 수"""

# pd.DataFrame(chart1.groupby(['요양개시_월'])['가입자 일련번호'].count())
month = pd.DataFrame(chart1.groupby(['요양개시_월'])['가입자 일련번호'].count())
month.reset_index(inplace = True)
month.rename(columns={'가입자 일련번호':'합계'}, inplace=True)

sns.barplot(data = month,x = '요양개시_월',y = '합계')

"""### 6) 계절별 주상병 총 합계"""

## 계절별 진료 합
season1 = chart1.groupby(['요양개시_계절','주상병한글명'])[['주상병코드']].count()
season1.rename(columns = {'주상병코드':'합계'}, inplace = True)
Season1 = season1.groupby(level=0, group_keys=False).apply(lambda x : x.sort_values(ascending=False, by='합계')[:1])
Season2=Season1.reset_index(['요양개시_계절','주상병한글명'])

sns.barplot(data = Season2,x = '요양개시_계절',y = '합계')
plt.title('계절별 주상병 진료 합', fontsize=20)
plt.xlabel('계절', fontsize=15)
plt.ylabel('합계', fontsize=15)

## 성별에 따른 진료과목 
gender_medi=chart1.groupby(['진료과목코드','성별코드'])[['성별코드']].count()
gender_medi.rename(columns={'성별코드':'합계'}, inplace = True) # 진료과목별 성별
gender = gender_medi.reset_index(['진료과목코드','성별코드'])
# plt.bar(gender_medi, )
# gender_medi.groupby(level=0, group_keys=False).apply(lambda x : x.sort_values(ascending=False, by='합계')[:1]).plot(kind='barh')

gender['합계'].fillna(0, inplace = True)
gender1=gender[gender['성별코드']==1]
gender2=gender[gender['성별코드']==2]
index = np.arange(len(gender1))
code=gender1['진료과목코드'].tolist()

bar_width=0.3
plt.bar(index, gender1['합계'],bar_width, label='남')
plt.bar(index+bar_width, gender2['합계'],bar_width, label='여')
plt.xticks(index,code)

plt.title('성별에 따른 진료과목 합계', fontsize=20)
plt.legend()
plt.xlabel('진료과목코드',fontsize=15)
plt.ylabel('합게', fontsize=15)

"""# 상관분석"""

sns.heatmap(chart1.corr(), annot=True, fmt='.2f')

"""## 변수 군집화"""

from sklearn.cluster import KMeans
